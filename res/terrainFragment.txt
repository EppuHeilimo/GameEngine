#version 330 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

in vec4 fragLightSpace;


out vec4 out_Color;

uniform sampler2D shadowMap;
uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;
uniform vec3 skyColor;
uniform vec3 lightColor[4];
uniform vec3 attenuation[4];

float shineDamper = 1;
float reflectivity = 0;

float bias = 0.0001;

float ShadowCalculation(vec4 fragLightSpace)
{
    vec3 projCoords = fragLightSpace.xyz / fragLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5; 
	float closestDepth = texture(shadowMap, projCoords.xy).r;   
	float currentDepth = projCoords.z;  
	float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;  
	return shadow;
}

void main(void) {
	
	
    vec4 blendMapColor = texture(blendMap, pass_textureCoords);
    float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec2 tiledCoords = pass_textureCoords * 50;
    vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
    vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
    vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
    vec3 totalColor = (backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor).rgb;
    
    vec3 unitNormal = normalize(surfaceNormal);

    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
	float nDot1;
    for(int i = 0; i <= 0; i++) {
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitLightVector = normalize(toLightVector[i]);
        nDot1 = dot(unitNormal, unitLightVector);
        float brightness = max(nDot1, 0.0); 
        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor, 0.2);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalDiffuse = totalDiffuse + (brightness * lightColor[i]) / attFactor;   
        totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i]) / attFactor;   
    }
	
	
   totalDiffuse = max(totalDiffuse, 0.0);

   bias = max(0.0001 * (1.0 - nDot1), 0.0001);
   float shadow = ShadowCalculation(fragLightSpace);
   vec3 lighting = (0.2 + (1.0 - shadow) * (totalDiffuse + totalSpecular)) * (totalColor);

    out_Color = vec4(lighting, 1.0); //shadow * vec4(totalDiffuse, 1.0) * totalColor + vec4(totalSpecular, 1.0);
    out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
}


